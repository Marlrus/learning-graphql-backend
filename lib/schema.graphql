"Validates level types"
enum Level {
  beginner
  intemediate
  advanced
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Person]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type DeletionMessage {
  message: String!
}

type Query {
  "Returns all Courses"
  getCourses: [Course]
  "Return specific course"
  getCourse(id: ID!): Course
  "Returns all People"
  getPeople: [Person]
  "Return specific student"
  getPerson(id: ID!): Person
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
  level: Level
}

input PersonInput {
  name: String!
  email: String!
  avatar: String
  phone: String
}

input PersonEditInput {
  name: String
  email: String
  avatar: String
  phone: String
}

type Mutation {
  "Create a Course"
  createCourse(input: CourseInput!): Course
  "Edit a Course"
  editCourse(_id: ID!, input: CourseEditInput!): Course
  "Delete a Course"
  deleteCourse(_id: ID!): DeletionMessage
  "Create a person"
  createPerson(input: PersonInput!): Person
  "Edit a person"
  editPerson(input: PersonEditInput!): Person
  "Delete a person"
  deletePerson(_id: ID!): DeletionMessage
  "Add Person to Course"
  addPerson(courseID: ID!, personID: ID!): Course
}
